Require Import String List.

Add LoadPath "C:\Users\Francisco\Desktop\LProg\Praticas\".
Load TacticsL8.

Inductive arith : Type :=
  | Const (n : nat)
  | Var (x : string)
  | Plus (e1 e2 : arith)
  | Times (e1 e2 : arith).

Fixpoint size (e: arith) : nat :=
  match e with
  | Const _ => 1
  | Var _ => 1
  | Plus e1 e2 => 1 + size e1 + size e2
  | Times e1 e2 => 1 + size e1 + size e2
  end.

Fixpoint depth (e: arith) : nat :=
  match e with
  | Const _ => 0
  | Var _ => 0
  | Plus e1 e2 => 
        1 + max (depth e1) (depth e2)
  | Times e1 e2 =>  
        1 + max (depth e1) (depth e2)
  end.

Theorem depth_le_size : forall e, depth e <= size e.
Proof.
  induction e.
  - simpl. linear_arithmetic.
  - simpl. linear_arithmetic.
  - simpl. linear_arithmetic.
  - simpl. linear_arithmetic.
Qed.

Fixpoint commuter (e: arith) : arith :=
  match e with
  | Const cvalue => Const cvalue
  | Var vvalue => Var vvalue
  | Plus e1 e2 => Plus (commuter e2) (commuter e1)
  | Times e1 e2 => Times (commuter e2) (commuter e1)
end.

Compute commuter (Plus (Const 1) (Times (Const 2) (Const 3))).

Fixpoint substitute (e1 : arith) (var : string) (e2 : arith) : arith :=
  match e1 with
  | Const c => Const c
  | Var v => if v =? var then e2
                         else Var v
  | Plus el er => Plus (substitute el var e2) (substitute er var e2)
  | Times el er => Times (substitute el var e2) (substitute er var e2)
end.


Compute substitute (Plus (Var "x") (Var "y")) "x" (Const 42).

